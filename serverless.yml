service: aws-python-rest-api-project

frameworkVersion: "2"

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: "20201221"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
          cors: true
  add:
    handler: lambdas/add.add
    events:
      - http:
          path: create
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - email
  get:
    handler: lambdas/get.get
    events:
      - http:
          path: emp/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - email

  delete:
    handler: lambdas/delete.delete
    events:
      - http:
          path: emp/{id}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - email

  update:
    handler: lambdas/update.update
    events:
      - http:
          path: emp/{id}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - email

resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Employee
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: my-user-pool
        UsernameAttributes:
          - email
        Schema:
          - Mutable: false
            Name: email
            Required: true
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: my-user-pool-client
        GenerateSecret: false
        UserPoolId: !Ref CognitoUserPool
        AllowedOAuthScopes:
          - email
          - phone
          - openid
          - profile
          - aws.cognito.signin.user.admin
        PreventUserExistenceErrors: ENABLED
        AllowedOAuthFlowsUserPoolClient: true
        CallbackURLs:
          - https://example.com/callback
        LogoutURLs:
          - https://example.com/signout
        AllowedOAuthFlows:
          - implicit
        SupportedIdentityProviders:
          - COGNITO
    CognitoUserPoolDomain:
      Type: "AWS::Cognito::UserPoolDomain"
      Properties:
        Domain: cogniserverless
        UserPoolId: !Ref CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
